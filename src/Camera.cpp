// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Camera.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Camera.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompCamera__Camera__getYUVImage_name = "getYUVImage";

const ::std::string __RoboCompCamera__Camera__getYImage_name = "getYImage";

const ::std::string __RoboCompCamera__Camera__getYLogPolarImage_name = "getYLogPolarImage";

const ::std::string __RoboCompCamera__Camera__getYImageCR_name = "getYImageCR";

const ::std::string __RoboCompCamera__Camera__getRGBPackedImage_name = "getRGBPackedImage";

const ::std::string __RoboCompCamera__Camera__getYRGBImage_name = "getYRGBImage";

const ::std::string __RoboCompCamera__Camera__getCamParams_name = "getCamParams";

const ::std::string __RoboCompCamera__Camera__setInnerImage_name = "setInnerImage";

}

namespace
{

const char* __RoboCompCamera__HardwareFailedException_name = "RoboCompCamera::HardwareFailedException";

struct __F__RoboCompCamera__HardwareFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompCamera::HardwareFailedException();
    }
};

class __F__RoboCompCamera__HardwareFailedException__Init
{
public:

    __F__RoboCompCamera__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompCamera::HardwareFailedException", new __F__RoboCompCamera__HardwareFailedException);
    }

    ~__F__RoboCompCamera__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompCamera::HardwareFailedException");
    }
};

const __F__RoboCompCamera__HardwareFailedException__Init __F__RoboCompCamera__HardwareFailedException__i;

}

RoboCompCamera::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompCamera::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompCamera::HardwareFailedException::ice_name() const
{
    return __RoboCompCamera__HardwareFailedException_name;
}

RoboCompCamera::HardwareFailedException*
RoboCompCamera::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompCamera::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompCamera::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompCamera::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompCamera::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompCamera__MovingImageException_name = "RoboCompCamera::MovingImageException";

struct __F__RoboCompCamera__MovingImageException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompCamera::MovingImageException();
    }
};

class __F__RoboCompCamera__MovingImageException__Init
{
public:

    __F__RoboCompCamera__MovingImageException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompCamera::MovingImageException", new __F__RoboCompCamera__MovingImageException);
    }

    ~__F__RoboCompCamera__MovingImageException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompCamera::MovingImageException");
    }
};

const __F__RoboCompCamera__MovingImageException__Init __F__RoboCompCamera__MovingImageException__i;

}

RoboCompCamera::MovingImageException::MovingImageException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompCamera::MovingImageException::~MovingImageException() throw()
{
}

::std::string
RoboCompCamera::MovingImageException::ice_name() const
{
    return __RoboCompCamera__MovingImageException_name;
}

RoboCompCamera::MovingImageException*
RoboCompCamera::MovingImageException::ice_clone() const
{
    return new MovingImageException(*this);
}

void
RoboCompCamera::MovingImageException::ice_throw() const
{
    throw *this;
}

void
RoboCompCamera::MovingImageException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompCamera::MovingImageException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompCamera::MovingImageException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompCamera::upCast(::IceProxy::RoboCompCamera::Camera* p) { return p; }

void
::IceProxy::RoboCompCamera::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCamera::Camera>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompCamera::Camera;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompCamera::Camera::getYUVImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__getYUVImage_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompCamera__Camera__getYUVImage_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            __del->getYUVImage(cam, roi, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYUVImage(::Ice::Int cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYUVImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYUVImage_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__getYUVImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_getYUVImage(::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYUVImage_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompCamera::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompCamera::Camera::getYImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__getYImage_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompCamera__Camera__getYImage_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            __del->getYImage(cam, roi, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYImage(::Ice::Int cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYImage_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__getYImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_getYImage(::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYImage_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompCamera::Camera::getYLogPolarImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__getYLogPolarImage_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompCamera__Camera__getYLogPolarImage_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            __del->getYLogPolarImage(cam, roi, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYLogPolarImage(::Ice::Int cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYLogPolarImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYLogPolarImage_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__getYLogPolarImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_getYLogPolarImage(::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYLogPolarImage_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompCamera::Camera::getYImageCR(::Ice::Int cam, ::Ice::Int div, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__getYImageCR_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompCamera__Camera__getYImageCR_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            __del->getYImageCR(cam, div, roi, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYImageCR(::Ice::Int cam, ::Ice::Int div, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYImageCR_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYImageCR_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__getYImageCR_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __os->write(div);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_getYImageCR(::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYImageCR_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompCamera::Camera::getRGBPackedImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__getRGBPackedImage_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompCamera__Camera__getRGBPackedImage_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            __del->getRGBPackedImage(cam, roi, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getRGBPackedImage(::Ice::Int cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getRGBPackedImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getRGBPackedImage_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__getRGBPackedImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_getRGBPackedImage(::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getRGBPackedImage_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompCamera::Camera::getYRGBImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__getYRGBImage_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompCamera__Camera__getYRGBImage_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            __del->getYRGBImage(cam, roi, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYRGBImage(::Ice::Int cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYRGBImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYRGBImage_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__getYRGBImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_getYRGBImage(::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYRGBImage_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompCamera::TCamParams
IceProxy::RoboCompCamera::Camera::getCamParams(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__getCamParams_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompCamera__Camera__getCamParams_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            return __del->getCamParams(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getCamParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getCamParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getCamParams_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__getCamParams_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompCamera::TCamParams
IceProxy::RoboCompCamera::Camera::end_getCamParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getCamParams_name);
    ::RoboCompCamera::TCamParams __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompCamera::Camera::setInnerImage(const ::RoboCompCamera::imgType& roi, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompCamera__Camera__setInnerImage_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompCamera::Camera* __del = dynamic_cast< ::IceDelegate::RoboCompCamera::Camera*>(__delBase.get());
            __del->setInnerImage(roi, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_setInnerImage(const ::RoboCompCamera::imgType& roi, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__setInnerImage_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompCamera__Camera__setInnerImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_setInnerImage(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCamera__Camera__setInnerImage_name);
}

const ::std::string&
IceProxy::RoboCompCamera::Camera::ice_staticId()
{
    return ::RoboCompCamera::Camera::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompCamera::Camera::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompCamera::Camera);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompCamera::Camera::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompCamera::Camera);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompCamera::Camera::__newInstance() const
{
    return new Camera;
}

void
IceDelegateM::RoboCompCamera::Camera::getYUVImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__getYUVImage_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompCamera::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompCamera::Camera::getYImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__getYImage_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompCamera::Camera::getYLogPolarImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__getYLogPolarImage_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompCamera::Camera::getYImageCR(::Ice::Int cam, ::Ice::Int div, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__getYImageCR_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __os->write(div);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompCamera::Camera::getRGBPackedImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__getRGBPackedImage_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompCamera::Camera::getYRGBImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__getYRGBImage_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompCamera::MovingImageException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(roi);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompCamera::TCamParams
IceDelegateM::RoboCompCamera::Camera::getCamParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__getCamParams_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompCamera::TCamParams __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompCamera::Camera::setInnerImage(const ::RoboCompCamera::imgType& roi, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompCamera__Camera__setInnerImage_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::RoboCompCamera::Camera::getYUVImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cam(__p_cam),
            _m_roi(__p_roi),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getYUVImage(_m_cam, _m_roi, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_cam;
        ::RoboCompCamera::imgType& _m_roi;
        ::RoboCompCommonHead::THeadState& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__getYUVImage_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cam, roi, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompCamera::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompCamera::Camera::getYImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cam(__p_cam),
            _m_roi(__p_roi),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getYImage(_m_cam, _m_roi, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_cam;
        ::RoboCompCamera::imgType& _m_roi;
        ::RoboCompCommonHead::THeadState& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__getYImage_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cam, roi, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompCamera::MovingImageException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompCamera::Camera::getYLogPolarImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cam(__p_cam),
            _m_roi(__p_roi),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getYLogPolarImage(_m_cam, _m_roi, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_cam;
        ::RoboCompCamera::imgType& _m_roi;
        ::RoboCompCommonHead::THeadState& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__getYLogPolarImage_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cam, roi, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompCamera::MovingImageException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompCamera::Camera::getYImageCR(::Ice::Int cam, ::Ice::Int div, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_cam, ::Ice::Int __p_div, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cam(__p_cam),
            _m_div(__p_div),
            _m_roi(__p_roi),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getYImageCR(_m_cam, _m_div, _m_roi, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_cam;
        ::Ice::Int _m_div;
        ::RoboCompCamera::imgType& _m_roi;
        ::RoboCompCommonHead::THeadState& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__getYImageCR_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cam, div, roi, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompCamera::MovingImageException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompCamera::Camera::getRGBPackedImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cam(__p_cam),
            _m_roi(__p_roi),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getRGBPackedImage(_m_cam, _m_roi, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_cam;
        ::RoboCompCamera::imgType& _m_roi;
        ::RoboCompCommonHead::THeadState& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__getRGBPackedImage_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cam, roi, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompCamera::MovingImageException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompCamera::Camera::getYRGBImage(::Ice::Int cam, ::RoboCompCamera::imgType& roi, ::RoboCompCommonHead::THeadState& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cam(__p_cam),
            _m_roi(__p_roi),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getYRGBImage(_m_cam, _m_roi, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_cam;
        ::RoboCompCamera::imgType& _m_roi;
        ::RoboCompCommonHead::THeadState& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__getYRGBImage_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cam, roi, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompCamera::MovingImageException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::RoboCompCamera::TCamParams
IceDelegateD::RoboCompCamera::Camera::getCamParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompCamera::TCamParams& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getCamParams(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompCamera::TCamParams& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__getCamParams_name, ::Ice::Normal, __context);
    ::RoboCompCamera::TCamParams __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompCamera::Camera::setInnerImage(const ::RoboCompCamera::imgType& roi, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_roi(__p_roi)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompCamera::Camera* servant = dynamic_cast< ::RoboCompCamera::Camera*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setInnerImage(_m_roi, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::RoboCompCamera::imgType& _m_roi;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompCamera__Camera__setInnerImage_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(roi, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompCamera::upCast(::RoboCompCamera::Camera* p) { return p; }

namespace
{
const ::std::string __RoboCompCamera__Camera_ids[2] =
{
    "::Ice::Object",
    "::RoboCompCamera::Camera"
};

}

bool
RoboCompCamera::Camera::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompCamera__Camera_ids, __RoboCompCamera__Camera_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompCamera::Camera::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompCamera__Camera_ids[0], &__RoboCompCamera__Camera_ids[2]);
}

const ::std::string&
RoboCompCamera::Camera::ice_id(const ::Ice::Current&) const
{
    return __RoboCompCamera__Camera_ids[1];
}

const ::std::string&
RoboCompCamera::Camera::ice_staticId()
{
    return __RoboCompCamera__Camera_ids[1];
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYUVImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int cam;
    __is->read(cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType roi;
    ::RoboCompCommonHead::THeadState hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getYUVImage(cam, roi, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int cam;
    __is->read(cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType roi;
    ::RoboCompCommonHead::THeadState hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getYImage(cam, roi, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYLogPolarImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int cam;
    __is->read(cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType roi;
    ::RoboCompCommonHead::THeadState hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getYLogPolarImage(cam, roi, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYImageCR(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int cam;
    ::Ice::Int div;
    __is->read(cam);
    __is->read(div);
    __inS.endReadParams();
    ::RoboCompCamera::imgType roi;
    ::RoboCompCommonHead::THeadState hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getYImageCR(cam, div, roi, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getRGBPackedImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int cam;
    __is->read(cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType roi;
    ::RoboCompCommonHead::THeadState hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getRGBPackedImage(cam, roi, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYRGBImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int cam;
    __is->read(cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType roi;
    ::RoboCompCommonHead::THeadState hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getYRGBImage(cam, roi, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(roi);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getCamParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompCamera::TCamParams __ret = getCamParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___setInnerImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompCamera::imgType roi;
    __is->read(roi);
    __inS.endReadParams();
    setInnerImage(roi, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompCamera__Camera_all[] =
{
    "getCamParams",
    "getRGBPackedImage",
    "getYImage",
    "getYImageCR",
    "getYLogPolarImage",
    "getYRGBImage",
    "getYUVImage",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setInnerImage"
};

}

::Ice::DispatchStatus
RoboCompCamera::Camera::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompCamera__Camera_all, __RoboCompCamera__Camera_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompCamera__Camera_all)
    {
        case 0:
        {
            return ___getCamParams(in, current);
        }
        case 1:
        {
            return ___getRGBPackedImage(in, current);
        }
        case 2:
        {
            return ___getYImage(in, current);
        }
        case 3:
        {
            return ___getYImageCR(in, current);
        }
        case 4:
        {
            return ___getYLogPolarImage(in, current);
        }
        case 5:
        {
            return ___getYRGBImage(in, current);
        }
        case 6:
        {
            return ___getYUVImage(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
        case 11:
        {
            return ___setInnerImage(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompCamera::Camera::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompCamera::Camera::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompCamera::__patch(CameraPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompCamera::CameraPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompCamera::Camera::ice_staticId(), v);
    }
}
