// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RGBD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RGBD.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompRGBD__RGBD__getRGBDParams_name = "getRGBDParams";

const ::std::string __RoboCompRGBD__RGBD__setRegistration_name = "setRegistration";

const ::std::string __RoboCompRGBD__RGBD__getRegistration_name = "getRegistration";

const ::std::string __RoboCompRGBD__RGBD__getData_name = "getData";

const ::std::string __RoboCompRGBD__RGBD__getDepthInIR_name = "getDepthInIR";

const ::std::string __RoboCompRGBD__RGBD__getImage_name = "getImage";

const ::std::string __RoboCompRGBD__RGBD__getDepth_name = "getDepth";

const ::std::string __RoboCompRGBD__RGBD__getRGB_name = "getRGB";

const ::std::string __RoboCompRGBD__RGBD__getXYZ_name = "getXYZ";

}

namespace
{

const char* __RoboCompRGBD__HardwareFailedException_name = "RoboCompRGBD::HardwareFailedException";

struct __F__RoboCompRGBD__HardwareFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompRGBD::HardwareFailedException();
    }
};

class __F__RoboCompRGBD__HardwareFailedException__Init
{
public:

    __F__RoboCompRGBD__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompRGBD::HardwareFailedException", new __F__RoboCompRGBD__HardwareFailedException);
    }

    ~__F__RoboCompRGBD__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompRGBD::HardwareFailedException");
    }
};

const __F__RoboCompRGBD__HardwareFailedException__Init __F__RoboCompRGBD__HardwareFailedException__i;

}

RoboCompRGBD::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompRGBD::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompRGBD::HardwareFailedException::ice_name() const
{
    return __RoboCompRGBD__HardwareFailedException_name;
}

RoboCompRGBD::HardwareFailedException*
RoboCompRGBD::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompRGBD::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompRGBD::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompRGBD::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompRGBD::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompRGBD::upCast(::IceProxy::RoboCompRGBD::RGBD* p) { return p; }

void
::IceProxy::RoboCompRGBD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBD::RGBD>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompRGBD::RGBD;
        v->__copyFrom(proxy);
    }
}

::RoboCompRGBD::TRGBDParams
IceProxy::RoboCompRGBD::RGBD::getRGBDParams(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getRGBDParams_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getRGBDParams_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            return __del->getRGBDParams(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getRGBDParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getRGBDParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getRGBDParams_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getRGBDParams_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompRGBD::TRGBDParams
IceProxy::RoboCompRGBD::RGBD::end_getRGBDParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getRGBDParams_name);
    ::RoboCompRGBD::TRGBDParams __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBD::RGBD::setRegistration(::RoboCompRGBD::Registration value, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__setRegistration_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__setRegistration_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            __del->setRegistration(value, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_setRegistration(::RoboCompRGBD::Registration value, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__setRegistration_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__setRegistration_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__setRegistration_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(value);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_setRegistration(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__setRegistration_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompRGBD::Registration
IceProxy::RoboCompRGBD::RGBD::getRegistration(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getRegistration_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getRegistration_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            return __del->getRegistration(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getRegistration(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getRegistration_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getRegistration_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getRegistration_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompRGBD::Registration
IceProxy::RoboCompRGBD::RGBD::end_getRegistration(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getRegistration_name);
    ::RoboCompRGBD::Registration __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBD::RGBD::getData(::RoboCompRGBD::imgType& rgbMatrix, ::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getData_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getData_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            __del->getData(rgbMatrix, distanceMatrix, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getData_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getData_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getData(::RoboCompRGBD::imgType& rgbMatrix, ::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getData_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(rgbMatrix);
        __is->read(distanceMatrix);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBD::RGBD::getDepthInIR(::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getDepthInIR_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getDepthInIR_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            __del->getDepthInIR(distanceMatrix, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getDepthInIR(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getDepthInIR_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getDepthInIR_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getDepthInIR_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getDepthInIR(::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getDepthInIR_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(distanceMatrix);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBD::RGBD::getImage(::RoboCompRGBD::ColorSeq& color, ::RoboCompRGBD::DepthSeq& depth, ::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getImage_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getImage_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            __del->getImage(color, depth, points, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getImage(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getImage_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getImage_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getImage(::RoboCompRGBD::ColorSeq& color, ::RoboCompRGBD::DepthSeq& depth, ::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getImage_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(color);
        __is->read(depth);
        __is->read(points);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBD::RGBD::getDepth(::RoboCompRGBD::DepthSeq& depth, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getDepth_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getDepth_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            __del->getDepth(depth, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getDepth(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getDepth_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getDepth_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getDepth_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getDepth(::RoboCompRGBD::DepthSeq& depth, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getDepth_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(depth);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBD::RGBD::getRGB(::RoboCompRGBD::ColorSeq& color, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getRGB_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getRGB_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            __del->getRGB(color, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getRGB(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getRGB_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getRGB_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getRGB_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getRGB(::RoboCompRGBD::ColorSeq& color, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getRGB_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(color);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBD::RGBD::getXYZ(::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBD__RGBD__getXYZ_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBD__RGBD__getXYZ_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBD::RGBD* __del = dynamic_cast< ::IceDelegate::RoboCompRGBD::RGBD*>(__delBase.get());
            __del->getXYZ(points, hState, bState, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getXYZ(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getXYZ_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getXYZ_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBD__RGBD__getXYZ_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBD::RGBD::end_getXYZ(::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getXYZ_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(points);
        __is->read(hState);
        __is->read(bState);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::RoboCompRGBD::RGBD::ice_staticId()
{
    return ::RoboCompRGBD::RGBD::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompRGBD::RGBD::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompRGBD::RGBD);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompRGBD::RGBD::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompRGBD::RGBD);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompRGBD::RGBD::__newInstance() const
{
    return new RGBD;
}

::RoboCompRGBD::TRGBDParams
IceDelegateM::RoboCompRGBD::RGBD::getRGBDParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getRGBDParams_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompRGBD::TRGBDParams __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBD::RGBD::setRegistration(::RoboCompRGBD::Registration value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__setRegistration_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(value);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompRGBD::Registration
IceDelegateM::RoboCompRGBD::RGBD::getRegistration(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getRegistration_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompRGBD::Registration __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBD::RGBD::getData(::RoboCompRGBD::imgType& rgbMatrix, ::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getData_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(rgbMatrix);
        __is->read(distanceMatrix);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBD::RGBD::getDepthInIR(::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getDepthInIR_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(distanceMatrix);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBD::RGBD::getImage(::RoboCompRGBD::ColorSeq& color, ::RoboCompRGBD::DepthSeq& depth, ::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getImage_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(color);
        __is->read(depth);
        __is->read(points);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBD::RGBD::getDepth(::RoboCompRGBD::DepthSeq& depth, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getDepth_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(depth);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBD::RGBD::getRGB(::RoboCompRGBD::ColorSeq& color, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getRGB_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(color);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBD::RGBD::getXYZ(::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBD__RGBD__getXYZ_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBD::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(points);
        __is->read(hState);
        __is->read(bState);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompRGBD::TRGBDParams
IceDelegateD::RoboCompRGBD::RGBD::getRGBDParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::TRGBDParams& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getRGBDParams(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RoboCompRGBD::TRGBDParams& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getRGBDParams_name, ::Ice::Normal, __context);
    ::RoboCompRGBD::TRGBDParams __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompRGBD::RGBD::setRegistration(::RoboCompRGBD::Registration value, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::Registration __p_value, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_value(__p_value)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setRegistration(_m_value, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::Registration _m_value;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__setRegistration_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(value, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::RoboCompRGBD::Registration
IceDelegateD::RoboCompRGBD::RGBD::getRegistration(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::Registration& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getRegistration(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::Registration& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getRegistration_name, ::Ice::Idempotent, __context);
    ::RoboCompRGBD::Registration __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompRGBD::RGBD::getData(::RoboCompRGBD::imgType& rgbMatrix, ::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::imgType& __p_rgbMatrix, ::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_rgbMatrix(__p_rgbMatrix),
            _m_distanceMatrix(__p_distanceMatrix),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getData(_m_rgbMatrix, _m_distanceMatrix, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::imgType& _m_rgbMatrix;
        ::RoboCompRGBD::depthType& _m_distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getData_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(rgbMatrix, distanceMatrix, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBD::RGBD::getDepthInIR(::RoboCompRGBD::depthType& distanceMatrix, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_distanceMatrix(__p_distanceMatrix),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getDepthInIR(_m_distanceMatrix, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::depthType& _m_distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getDepthInIR_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(distanceMatrix, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBD::RGBD::getImage(::RoboCompRGBD::ColorSeq& color, ::RoboCompRGBD::DepthSeq& depth, ::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_color(__p_color),
            _m_depth(__p_depth),
            _m_points(__p_points),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getImage(_m_color, _m_depth, _m_points, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::ColorSeq& _m_color;
        ::RoboCompRGBD::DepthSeq& _m_depth;
        ::RoboCompRGBD::PointSeq& _m_points;
        ::RoboCompJointMotor::MotorStateMap& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getImage_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(color, depth, points, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBD::RGBD::getDepth(::RoboCompRGBD::DepthSeq& depth, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_depth(__p_depth),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getDepth(_m_depth, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::DepthSeq& _m_depth;
        ::RoboCompJointMotor::MotorStateMap& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getDepth_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(depth, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBD::RGBD::getRGB(::RoboCompRGBD::ColorSeq& color, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_color(__p_color),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getRGB(_m_color, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::ColorSeq& _m_color;
        ::RoboCompJointMotor::MotorStateMap& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getRGB_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(color, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBD::RGBD::getXYZ(::RoboCompRGBD::PointSeq& points, ::RoboCompJointMotor::MotorStateMap& hState, ::RoboCompDifferentialRobot::TBaseState& bState, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompDifferentialRobot::TBaseState& __p_bState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_points(__p_points),
            _m_hState(__p_hState),
            _m_bState(__p_bState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBD::RGBD* servant = dynamic_cast< ::RoboCompRGBD::RGBD*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getXYZ(_m_points, _m_hState, _m_bState, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBD::PointSeq& _m_points;
        ::RoboCompJointMotor::MotorStateMap& _m_hState;
        ::RoboCompDifferentialRobot::TBaseState& _m_bState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBD__RGBD__getXYZ_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(points, hState, bState, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBD::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompRGBD::upCast(::RoboCompRGBD::RGBD* p) { return p; }

namespace
{
const ::std::string __RoboCompRGBD__RGBD_ids[2] =
{
    "::Ice::Object",
    "::RoboCompRGBD::RGBD"
};

}

bool
RoboCompRGBD::RGBD::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompRGBD__RGBD_ids, __RoboCompRGBD__RGBD_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompRGBD::RGBD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompRGBD__RGBD_ids[0], &__RoboCompRGBD__RGBD_ids[2]);
}

const ::std::string&
RoboCompRGBD::RGBD::ice_id(const ::Ice::Current&) const
{
    return __RoboCompRGBD__RGBD_ids[1];
}

const ::std::string&
RoboCompRGBD::RGBD::ice_staticId()
{
    return __RoboCompRGBD__RGBD_ids[1];
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getRGBDParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::TRGBDParams __ret = getRGBDParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___setRegistration(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRGBD::Registration value;
    __is->read(value);
    __inS.endReadParams();
    try
    {
        setRegistration(value, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getRegistration(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::RoboCompRGBD::Registration __ret = getRegistration(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::imgType rgbMatrix;
    ::RoboCompRGBD::depthType distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getData(rgbMatrix, distanceMatrix, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(rgbMatrix);
        __os->write(distanceMatrix);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getDepthInIR(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::depthType distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getDepthInIR(distanceMatrix, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(distanceMatrix);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::ColorSeq color;
    ::RoboCompRGBD::DepthSeq depth;
    ::RoboCompRGBD::PointSeq points;
    ::RoboCompJointMotor::MotorStateMap hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getImage(color, depth, points, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(color);
        __os->write(depth);
        __os->write(points);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getDepth(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::DepthSeq depth;
    ::RoboCompJointMotor::MotorStateMap hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getDepth(depth, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(depth);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getRGB(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::ColorSeq color;
    ::RoboCompJointMotor::MotorStateMap hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getRGB(color, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(color);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getXYZ(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::PointSeq points;
    ::RoboCompJointMotor::MotorStateMap hState;
    ::RoboCompDifferentialRobot::TBaseState bState;
    try
    {
        getXYZ(points, hState, bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(points);
        __os->write(hState);
        __os->write(bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __RoboCompRGBD__RGBD_all[] =
{
    "getData",
    "getDepth",
    "getDepthInIR",
    "getImage",
    "getRGB",
    "getRGBDParams",
    "getRegistration",
    "getXYZ",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setRegistration"
};

}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompRGBD__RGBD_all, __RoboCompRGBD__RGBD_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompRGBD__RGBD_all)
    {
        case 0:
        {
            return ___getData(in, current);
        }
        case 1:
        {
            return ___getDepth(in, current);
        }
        case 2:
        {
            return ___getDepthInIR(in, current);
        }
        case 3:
        {
            return ___getImage(in, current);
        }
        case 4:
        {
            return ___getRGB(in, current);
        }
        case 5:
        {
            return ___getRGBDParams(in, current);
        }
        case 6:
        {
            return ___getRegistration(in, current);
        }
        case 7:
        {
            return ___getXYZ(in, current);
        }
        case 8:
        {
            return ___ice_id(in, current);
        }
        case 9:
        {
            return ___ice_ids(in, current);
        }
        case 10:
        {
            return ___ice_isA(in, current);
        }
        case 11:
        {
            return ___ice_ping(in, current);
        }
        case 12:
        {
            return ___setRegistration(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompRGBD::RGBD::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompRGBD::RGBD::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompRGBD::__patch(RGBDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompRGBD::RGBDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompRGBD::RGBD::ice_staticId(), v);
    }
}
