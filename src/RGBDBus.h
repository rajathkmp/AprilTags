// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RGBDBus.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____RGBDBus_h__
#define ____RGBDBus_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompRGBDBus
{

class RGBDBus;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBDBus::RGBDBus>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompRGBDBus::RGBDBus*);

}

}

namespace RoboCompRGBDBus
{

class RGBDBus;
bool operator==(const RGBDBus&, const RGBDBus&);
bool operator<(const RGBDBus&, const RGBDBus&);
::Ice::Object* upCast(::RoboCompRGBDBus::RGBDBus*);
typedef ::IceInternal::Handle< ::RoboCompRGBDBus::RGBDBus> RGBDBusPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBDBus::RGBDBus> RGBDBusPrx;
void __patch(RGBDBusPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompRGBDBus
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_name() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static HardwareFailedException __HardwareFailedException_init;

struct CameraParams
{
    ::Ice::Int colorWidth;
    ::Ice::Int colorHeight;
    ::Ice::Int colorFPS;
    ::Ice::Int depthWidth;
    ::Ice::Int depthHeight;
    ::Ice::Int depthFPS;
    ::Ice::Float colorFocal;
    ::Ice::Float depthFocal;
    ::std::string name;

    bool operator==(const CameraParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(colorWidth != __rhs.colorWidth)
        {
            return false;
        }
        if(colorHeight != __rhs.colorHeight)
        {
            return false;
        }
        if(colorFPS != __rhs.colorFPS)
        {
            return false;
        }
        if(depthWidth != __rhs.depthWidth)
        {
            return false;
        }
        if(depthHeight != __rhs.depthHeight)
        {
            return false;
        }
        if(depthFPS != __rhs.depthFPS)
        {
            return false;
        }
        if(colorFocal != __rhs.colorFocal)
        {
            return false;
        }
        if(depthFocal != __rhs.depthFocal)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CameraParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(colorWidth < __rhs.colorWidth)
        {
            return true;
        }
        else if(__rhs.colorWidth < colorWidth)
        {
            return false;
        }
        if(colorHeight < __rhs.colorHeight)
        {
            return true;
        }
        else if(__rhs.colorHeight < colorHeight)
        {
            return false;
        }
        if(colorFPS < __rhs.colorFPS)
        {
            return true;
        }
        else if(__rhs.colorFPS < colorFPS)
        {
            return false;
        }
        if(depthWidth < __rhs.depthWidth)
        {
            return true;
        }
        else if(__rhs.depthWidth < depthWidth)
        {
            return false;
        }
        if(depthHeight < __rhs.depthHeight)
        {
            return true;
        }
        else if(__rhs.depthHeight < depthHeight)
        {
            return false;
        }
        if(depthFPS < __rhs.depthFPS)
        {
            return true;
        }
        else if(__rhs.depthFPS < depthFPS)
        {
            return false;
        }
        if(colorFocal < __rhs.colorFocal)
        {
            return true;
        }
        else if(__rhs.colorFocal < colorFocal)
        {
            return false;
        }
        if(depthFocal < __rhs.depthFocal)
        {
            return true;
        }
        else if(__rhs.depthFocal < depthFocal)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CameraParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CameraParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CameraParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CameraParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::RoboCompRGBDBus::CameraParams> CameraParamsMap;

typedef ::std::vector< ::std::string> CameraList;

typedef ::std::vector< ::Ice::Byte> ColorBuffer;

typedef ::std::vector< ::Ice::Float> DepthBuffer;

struct Image
{
    ::RoboCompRGBDBus::CameraParams camera;
    ::RoboCompRGBDBus::ColorBuffer colorImage;
    ::RoboCompRGBDBus::DepthBuffer depthImage;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Long colorTimestamp;
    ::Ice::Long depthTimestamp;

    bool operator==(const Image& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(camera != __rhs.camera)
        {
            return false;
        }
        if(colorImage != __rhs.colorImage)
        {
            return false;
        }
        if(depthImage != __rhs.depthImage)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(colorTimestamp != __rhs.colorTimestamp)
        {
            return false;
        }
        if(depthTimestamp != __rhs.depthTimestamp)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Image& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(camera < __rhs.camera)
        {
            return true;
        }
        else if(__rhs.camera < camera)
        {
            return false;
        }
        if(colorImage < __rhs.colorImage)
        {
            return true;
        }
        else if(__rhs.colorImage < colorImage)
        {
            return false;
        }
        if(depthImage < __rhs.depthImage)
        {
            return true;
        }
        else if(__rhs.depthImage < depthImage)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(colorTimestamp < __rhs.colorTimestamp)
        {
            return true;
        }
        else if(__rhs.colorTimestamp < colorTimestamp)
        {
            return false;
        }
        if(depthTimestamp < __rhs.depthTimestamp)
        {
            return true;
        }
        else if(__rhs.depthTimestamp < depthTimestamp)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Image& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Image& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Image& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Image& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::RoboCompRGBDBus::Image> ImageMap;

struct Point3D
{
    ::Ice::Byte r;
    ::Ice::Byte g;
    ::Ice::Byte b;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;

    bool operator==(const Point3D& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(r != __rhs.r)
        {
            return false;
        }
        if(g != __rhs.g)
        {
            return false;
        }
        if(b != __rhs.b)
        {
            return false;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point3D& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(r < __rhs.r)
        {
            return true;
        }
        else if(__rhs.r < r)
        {
            return false;
        }
        if(g < __rhs.g)
        {
            return true;
        }
        else if(__rhs.g < g)
        {
            return false;
        }
        if(b < __rhs.b)
        {
            return true;
        }
        else if(__rhs.b < b)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point3D& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Point3D& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Point3D& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Point3D& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RoboCompRGBDBus::Point3D> PointCloud;

typedef ::std::map< ::std::string, ::RoboCompRGBDBus::PointCloud> PointCloudMap;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompRGBDBus::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::CameraParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 33;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompRGBDBus::CameraParams, S>
{
    static void write(S* __os, const ::RoboCompRGBDBus::CameraParams& v)
    {
        __os->write(v.colorWidth);
        __os->write(v.colorHeight);
        __os->write(v.colorFPS);
        __os->write(v.depthWidth);
        __os->write(v.depthHeight);
        __os->write(v.depthFPS);
        __os->write(v.colorFocal);
        __os->write(v.depthFocal);
        __os->write(v.name);
    }
};

template<class S>
struct StreamReader< ::RoboCompRGBDBus::CameraParams, S>
{
    static void read(S* __is, ::RoboCompRGBDBus::CameraParams& v)
    {
        __is->read(v.colorWidth);
        __is->read(v.colorHeight);
        __is->read(v.colorFPS);
        __is->read(v.depthWidth);
        __is->read(v.depthHeight);
        __is->read(v.depthFPS);
        __is->read(v.colorFocal);
        __is->read(v.depthFocal);
        __is->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 59;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompRGBDBus::Image, S>
{
    static void write(S* __os, const ::RoboCompRGBDBus::Image& v)
    {
        __os->write(v.camera);
        __os->write(v.colorImage);
        __os->write(v.depthImage);
        __os->write(v.width);
        __os->write(v.height);
        __os->write(v.colorTimestamp);
        __os->write(v.depthTimestamp);
    }
};

template<class S>
struct StreamReader< ::RoboCompRGBDBus::Image, S>
{
    static void read(S* __is, ::RoboCompRGBDBus::Image& v)
    {
        __is->read(v.camera);
        __is->read(v.colorImage);
        __is->read(v.depthImage);
        __is->read(v.width);
        __is->read(v.height);
        __is->read(v.colorTimestamp);
        __is->read(v.depthTimestamp);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::Point3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompRGBDBus::Point3D, S>
{
    static void write(S* __os, const ::RoboCompRGBDBus::Point3D& v)
    {
        __os->write(v.r);
        __os->write(v.g);
        __os->write(v.b);
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
    }
};

template<class S>
struct StreamReader< ::RoboCompRGBDBus::Point3D, S>
{
    static void read(S* __is, ::RoboCompRGBDBus::Point3D& v)
    {
        __is->read(v.r);
        __is->read(v.g);
        __is->read(v.b);
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
    }
};

}

namespace RoboCompRGBDBus
{

class Callback_RGBDBus_getAllCameraParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getAllCameraParams_Base> Callback_RGBDBus_getAllCameraParamsPtr;

class Callback_RGBDBus_getImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getImages_Base> Callback_RGBDBus_getImagesPtr;

class Callback_RGBDBus_getPointClouds_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getPointClouds_Base> Callback_RGBDBus_getPointCloudsPtr;

class Callback_RGBDBus_getProtoClouds_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getProtoClouds_Base> Callback_RGBDBus_getProtoCloudsPtr;

class Callback_RGBDBus_getDecimatedImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getDecimatedImages_Base> Callback_RGBDBus_getDecimatedImagesPtr;

}

namespace IceProxy
{

namespace RoboCompRGBDBus
{

class RGBDBus : virtual public ::IceProxy::Ice::Object
{
public:

    ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams()
    {
        return getAllCameraParams(0);
    }
    ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context& __ctx)
    {
        return getAllCameraParams(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllCameraParams(const ::IceInternal::Function<void (const ::RoboCompRGBDBus::CameraParamsMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllCameraParams(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllCameraParams(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllCameraParams(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllCameraParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::CameraParamsMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllCameraParams(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllCameraParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllCameraParams(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllCameraParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::CameraParamsMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRGBDBus::CameraParamsMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRGBDBus::CameraParamsMap __ret;
                try
                {
                    __ret = __proxy->end_getAllCameraParams(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRGBDBus::CameraParamsMap&)> _response;
        };
        return begin_getAllCameraParams(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllCameraParams()
    {
        return begin_getAllCameraParams(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& __ctx)
    {
        return begin_getAllCameraParams(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllCameraParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllCameraParams(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::RoboCompRGBDBus::Callback_RGBDBus_getAllCameraParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllCameraParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& __ctx, const ::RoboCompRGBDBus::Callback_RGBDBus_getAllCameraParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllCameraParams(&__ctx, __del, __cookie);
    }

    ::RoboCompRGBDBus::CameraParamsMap end_getAllCameraParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getImages(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::ImageMap& images)
    {
        getImages(cameras, images, 0);
    }
    void getImages(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context& __ctx)
    {
        getImages(cameras, images, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::ImageMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImages(cameras, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImages(cameras, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::ImageMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImages(cameras, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImages(cameras, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::ImageMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRGBDBus::ImageMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRGBDBus::ImageMap images;
                try
                {
                    __proxy->end_getImages(images, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(images);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRGBDBus::ImageMap&)> _response;
        };
        return begin_getImages(cameras, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras)
    {
        return begin_getImages(cameras, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx)
    {
        return begin_getImages(cameras, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImages(cameras, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImages(cameras, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImages(cameras, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::RoboCompRGBDBus::Callback_RGBDBus_getImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImages(cameras, &__ctx, __del, __cookie);
    }

    void end_getImages(::RoboCompRGBDBus::ImageMap& images, const ::Ice::AsyncResultPtr&);
    
private:

    void getImages(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& clouds)
    {
        getPointClouds(cameras, clouds, 0);
    }
    void getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::Context& __ctx)
    {
        getPointClouds(cameras, clouds, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPointClouds(cameras, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPointClouds(cameras, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPointClouds(cameras, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPointClouds(cameras, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRGBDBus::PointCloudMap clouds;
                try
                {
                    __proxy->end_getPointClouds(clouds, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(clouds);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRGBDBus::PointCloudMap&)> _response;
        };
        return begin_getPointClouds(cameras, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras)
    {
        return begin_getPointClouds(cameras, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx)
    {
        return begin_getPointClouds(cameras, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPointClouds(cameras, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPointClouds(cameras, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getPointCloudsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPointClouds(cameras, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::RoboCompRGBDBus::Callback_RGBDBus_getPointCloudsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPointClouds(cameras, &__ctx, __del, __cookie);
    }

    void end_getPointClouds(::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::AsyncResultPtr&);
    
private:

    void getPointClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& protoClouds)
    {
        getProtoClouds(cameras, protoClouds, 0);
    }
    void getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::Context& __ctx)
    {
        getProtoClouds(cameras, protoClouds, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getProtoClouds(cameras, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getProtoClouds(cameras, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getProtoClouds(cameras, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getProtoClouds(cameras, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRGBDBus::PointCloudMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRGBDBus::PointCloudMap protoClouds;
                try
                {
                    __proxy->end_getProtoClouds(protoClouds, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(protoClouds);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRGBDBus::PointCloudMap&)> _response;
        };
        return begin_getProtoClouds(cameras, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras)
    {
        return begin_getProtoClouds(cameras, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx)
    {
        return begin_getProtoClouds(cameras, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtoClouds(cameras, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtoClouds(cameras, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getProtoCloudsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtoClouds(cameras, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context& __ctx, const ::RoboCompRGBDBus::Callback_RGBDBus_getProtoCloudsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProtoClouds(cameras, &__ctx, __del, __cookie);
    }

    void end_getProtoClouds(::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::AsyncResultPtr&);
    
private:

    void getProtoClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, ::RoboCompRGBDBus::ImageMap& images)
    {
        getDecimatedImages(cameras, decimation, images, 0);
    }
    void getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context& __ctx)
    {
        getDecimatedImages(cameras, decimation, images, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::ImageMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDecimatedImages(cameras, decimation, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDecimatedImages(cameras, decimation, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::ImageMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDecimatedImages(cameras, decimation, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDecimatedImages(cameras, decimation, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBDBus::ImageMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRGBDBus::ImageMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRGBDBus::ImageMap images;
                try
                {
                    __proxy->end_getDecimatedImages(images, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(images);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRGBDBus::ImageMap&)> _response;
        };
        return begin_getDecimatedImages(cameras, decimation, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation)
    {
        return begin_getDecimatedImages(cameras, decimation, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& __ctx)
    {
        return begin_getDecimatedImages(cameras, decimation, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDecimatedImages(cameras, decimation, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDecimatedImages(cameras, decimation, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::RoboCompRGBDBus::Callback_RGBDBus_getDecimatedImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDecimatedImages(cameras, decimation, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context& __ctx, const ::RoboCompRGBDBus::Callback_RGBDBus_getDecimatedImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDecimatedImages(cameras, decimation, &__ctx, __del, __cookie);
    }

    void end_getDecimatedImages(::RoboCompRGBDBus::ImageMap& images, const ::Ice::AsyncResultPtr&);
    
private:

    void getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_secure(bool __secure) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_twoway() const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_oneway() const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_batchOneway() const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_datagram() const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_batchDatagram() const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_compress(bool __compress) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RGBDBus> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RGBDBus*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompRGBDBus
{

class RGBDBus : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getImages(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getPointClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getProtoClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompRGBDBus
{

class RGBDBus : virtual public ::IceDelegate::RoboCompRGBDBus::RGBDBus,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getImages(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getPointClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getProtoClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompRGBDBus
{

class RGBDBus : virtual public ::IceDelegate::RoboCompRGBDBus::RGBDBus,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getImages(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getPointClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getProtoClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompRGBDBus
{

class RGBDBus : virtual public ::Ice::Object
{
public:

    typedef RGBDBusPrx ProxyType;
    typedef RGBDBusPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllCameraParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImages(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getPointClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPointClouds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getProtoClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getProtoClouds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDecimatedImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const RGBDBus& l, const RGBDBus& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RGBDBus& l, const RGBDBus& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompRGBDBus
{

template<class T>
class CallbackNC_RGBDBus_getAllCameraParams : public Callback_RGBDBus_getAllCameraParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::CameraParamsMap&);

    CallbackNC_RGBDBus_getAllCameraParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::CameraParamsMap __ret;
        try
        {
            __ret = __proxy->end_getAllCameraParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getAllCameraParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getAllCameraParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getAllCameraParams : public Callback_RGBDBus_getAllCameraParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::CameraParamsMap&, const CT&);

    Callback_RGBDBus_getAllCameraParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::CameraParamsMap __ret;
        try
        {
            __ret = __proxy->end_getAllCameraParams(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getAllCameraParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getAllCameraParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getImages : public Callback_RGBDBus_getImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&);

    CallbackNC_RGBDBus_getImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::ImageMap images;
        try
        {
            __proxy->end_getImages(images, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(images);
        }
    }

    Response response;
};

template<class T> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getImages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getImages : public Callback_RGBDBus_getImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&, const CT&);

    Callback_RGBDBus_getImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::ImageMap images;
        try
        {
            __proxy->end_getImages(images, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(images, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getPointClouds : public Callback_RGBDBus_getPointClouds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&);

    CallbackNC_RGBDBus_getPointClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap clouds;
        try
        {
            __proxy->end_getPointClouds(clouds, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(clouds);
        }
    }

    Response response;
};

template<class T> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getPointClouds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getPointClouds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getPointClouds : public Callback_RGBDBus_getPointClouds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&);

    Callback_RGBDBus_getPointClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap clouds;
        try
        {
            __proxy->end_getPointClouds(clouds, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(clouds, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getPointClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getPointClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getProtoClouds : public Callback_RGBDBus_getProtoClouds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&);

    CallbackNC_RGBDBus_getProtoClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap protoClouds;
        try
        {
            __proxy->end_getProtoClouds(protoClouds, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(protoClouds);
        }
    }

    Response response;
};

template<class T> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getProtoClouds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getProtoClouds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getProtoClouds : public Callback_RGBDBus_getProtoClouds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&);

    Callback_RGBDBus_getProtoClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap protoClouds;
        try
        {
            __proxy->end_getProtoClouds(protoClouds, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(protoClouds, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getProtoClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getProtoClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getDecimatedImages : public Callback_RGBDBus_getDecimatedImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&);

    CallbackNC_RGBDBus_getDecimatedImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::ImageMap images;
        try
        {
            __proxy->end_getDecimatedImages(images, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(images);
        }
    }

    Response response;
};

template<class T> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getDecimatedImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getDecimatedImages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getDecimatedImages : public Callback_RGBDBus_getDecimatedImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&, const CT&);

    Callback_RGBDBus_getDecimatedImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx __proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBDBus::ImageMap images;
        try
        {
            __proxy->end_getDecimatedImages(images, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(images, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getDecimatedImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getDecimatedImages<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
