// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RGBDBus.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RGBDBus.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompRGBDBus__RGBDBus__getAllCameraParams_name = "getAllCameraParams";

const ::std::string __RoboCompRGBDBus__RGBDBus__getImages_name = "getImages";

const ::std::string __RoboCompRGBDBus__RGBDBus__getPointClouds_name = "getPointClouds";

const ::std::string __RoboCompRGBDBus__RGBDBus__getProtoClouds_name = "getProtoClouds";

const ::std::string __RoboCompRGBDBus__RGBDBus__getDecimatedImages_name = "getDecimatedImages";

}

namespace
{

const char* __RoboCompRGBDBus__HardwareFailedException_name = "RoboCompRGBDBus::HardwareFailedException";

struct __F__RoboCompRGBDBus__HardwareFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompRGBDBus::HardwareFailedException();
    }
};

class __F__RoboCompRGBDBus__HardwareFailedException__Init
{
public:

    __F__RoboCompRGBDBus__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompRGBDBus::HardwareFailedException", new __F__RoboCompRGBDBus__HardwareFailedException);
    }

    ~__F__RoboCompRGBDBus__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompRGBDBus::HardwareFailedException");
    }
};

const __F__RoboCompRGBDBus__HardwareFailedException__Init __F__RoboCompRGBDBus__HardwareFailedException__i;

}

RoboCompRGBDBus::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompRGBDBus::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompRGBDBus::HardwareFailedException::ice_name() const
{
    return __RoboCompRGBDBus__HardwareFailedException_name;
}

RoboCompRGBDBus::HardwareFailedException*
RoboCompRGBDBus::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompRGBDBus::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompRGBDBus::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompRGBDBus::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompRGBDBus::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompRGBDBus::upCast(::IceProxy::RoboCompRGBDBus::RGBDBus* p) { return p; }

void
::IceProxy::RoboCompRGBDBus::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBDBus::RGBDBus>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompRGBDBus::RGBDBus;
        v->__copyFrom(proxy);
    }
}

::RoboCompRGBDBus::CameraParamsMap
IceProxy::RoboCompRGBDBus::RGBDBus::getAllCameraParams(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBDBus__RGBDBus__getAllCameraParams_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBDBus__RGBDBus__getAllCameraParams_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBDBus::RGBDBus* __del = dynamic_cast< ::IceDelegate::RoboCompRGBDBus::RGBDBus*>(__delBase.get());
            return __del->getAllCameraParams(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBDBus::RGBDBus::begin_getAllCameraParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBDBus__RGBDBus__getAllCameraParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBDBus__RGBDBus__getAllCameraParams_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBDBus__RGBDBus__getAllCameraParams_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompRGBDBus::CameraParamsMap
IceProxy::RoboCompRGBDBus::RGBDBus::end_getAllCameraParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBDBus__RGBDBus__getAllCameraParams_name);
    ::RoboCompRGBDBus::CameraParamsMap __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::getImages(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBDBus__RGBDBus__getImages_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBDBus__RGBDBus__getImages_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBDBus::RGBDBus* __del = dynamic_cast< ::IceDelegate::RoboCompRGBDBus::RGBDBus*>(__delBase.get());
            __del->getImages(cameras, images, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBDBus::RGBDBus::begin_getImages(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBDBus__RGBDBus__getImages_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBDBus__RGBDBus__getImages_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBDBus__RGBDBus__getImages_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::end_getImages(::RoboCompRGBDBus::ImageMap& images, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBDBus__RGBDBus__getImages_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(images);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBDBus__RGBDBus__getPointClouds_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBDBus__RGBDBus__getPointClouds_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBDBus::RGBDBus* __del = dynamic_cast< ::IceDelegate::RoboCompRGBDBus::RGBDBus*>(__delBase.get());
            __del->getPointClouds(cameras, clouds, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBDBus::RGBDBus::begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBDBus__RGBDBus__getPointClouds_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBDBus__RGBDBus__getPointClouds_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBDBus__RGBDBus__getPointClouds_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::end_getPointClouds(::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBDBus__RGBDBus__getPointClouds_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(clouds);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBDBus__RGBDBus__getProtoClouds_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBDBus__RGBDBus__getProtoClouds_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBDBus::RGBDBus* __del = dynamic_cast< ::IceDelegate::RoboCompRGBDBus::RGBDBus*>(__delBase.get());
            __del->getProtoClouds(cameras, protoClouds, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBDBus::RGBDBus::begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBDBus__RGBDBus__getProtoClouds_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBDBus__RGBDBus__getProtoClouds_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBDBus__RGBDBus__getProtoClouds_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::end_getProtoClouds(::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBDBus__RGBDBus__getProtoClouds_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(protoClouds);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRGBDBus__RGBDBus__getDecimatedImages_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRGBDBus__RGBDBus__getDecimatedImages_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRGBDBus::RGBDBus* __del = dynamic_cast< ::IceDelegate::RoboCompRGBDBus::RGBDBus*>(__delBase.get());
            __del->getDecimatedImages(cameras, decimation, images, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBDBus::RGBDBus::begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBDBus__RGBDBus__getDecimatedImages_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBDBus__RGBDBus__getDecimatedImages_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRGBDBus__RGBDBus__getDecimatedImages_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __os->write(decimation);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRGBDBus::RGBDBus::end_getDecimatedImages(::RoboCompRGBDBus::ImageMap& images, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBDBus__RGBDBus__getDecimatedImages_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(images);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::RoboCompRGBDBus::RGBDBus::ice_staticId()
{
    return ::RoboCompRGBDBus::RGBDBus::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompRGBDBus::RGBDBus::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompRGBDBus::RGBDBus);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompRGBDBus::RGBDBus::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompRGBDBus::RGBDBus);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompRGBDBus::RGBDBus::__newInstance() const
{
    return new RGBDBus;
}

::RoboCompRGBDBus::CameraParamsMap
IceDelegateM::RoboCompRGBDBus::RGBDBus::getAllCameraParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBDBus__RGBDBus__getAllCameraParams_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::RoboCompRGBDBus::CameraParamsMap __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBDBus::RGBDBus::getImages(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBDBus__RGBDBus__getImages_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(images);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBDBus::RGBDBus::getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBDBus__RGBDBus__getPointClouds_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(clouds);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBDBus::RGBDBus::getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBDBus__RGBDBus__getProtoClouds_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(protoClouds);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRGBDBus::RGBDBus::getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRGBDBus__RGBDBus__getDecimatedImages_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cameras);
        __os->write(decimation);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRGBDBus::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(images);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompRGBDBus::CameraParamsMap
IceDelegateD::RoboCompRGBDBus::RGBDBus::getAllCameraParams(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRGBDBus::CameraParamsMap& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBDBus::RGBDBus* servant = dynamic_cast< ::RoboCompRGBDBus::RGBDBus*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getAllCameraParams(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRGBDBus::CameraParamsMap& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBDBus__RGBDBus__getAllCameraParams_name, ::Ice::Idempotent, __context);
    ::RoboCompRGBDBus::CameraParamsMap __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompRGBDBus::RGBDBus::getImages(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRGBDBus::CameraList& __p_cameras, ::RoboCompRGBDBus::ImageMap& __p_images, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cameras(__p_cameras),
            _m_images(__p_images)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBDBus::RGBDBus* servant = dynamic_cast< ::RoboCompRGBDBus::RGBDBus*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getImages(_m_cameras, _m_images, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompRGBDBus::CameraList& _m_cameras;
        ::RoboCompRGBDBus::ImageMap& _m_images;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBDBus__RGBDBus__getImages_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cameras, images, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBDBus::RGBDBus::getPointClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& clouds, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRGBDBus::CameraList& __p_cameras, ::RoboCompRGBDBus::PointCloudMap& __p_clouds, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cameras(__p_cameras),
            _m_clouds(__p_clouds)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBDBus::RGBDBus* servant = dynamic_cast< ::RoboCompRGBDBus::RGBDBus*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getPointClouds(_m_cameras, _m_clouds, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompRGBDBus::CameraList& _m_cameras;
        ::RoboCompRGBDBus::PointCloudMap& _m_clouds;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBDBus__RGBDBus__getPointClouds_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cameras, clouds, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBDBus::RGBDBus::getProtoClouds(const ::RoboCompRGBDBus::CameraList& cameras, ::RoboCompRGBDBus::PointCloudMap& protoClouds, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRGBDBus::CameraList& __p_cameras, ::RoboCompRGBDBus::PointCloudMap& __p_protoClouds, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cameras(__p_cameras),
            _m_protoClouds(__p_protoClouds)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBDBus::RGBDBus* servant = dynamic_cast< ::RoboCompRGBDBus::RGBDBus*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getProtoClouds(_m_cameras, _m_protoClouds, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompRGBDBus::CameraList& _m_cameras;
        ::RoboCompRGBDBus::PointCloudMap& _m_protoClouds;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBDBus__RGBDBus__getProtoClouds_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cameras, protoClouds, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRGBDBus::RGBDBus::getDecimatedImages(const ::RoboCompRGBDBus::CameraList& cameras, ::Ice::Int decimation, ::RoboCompRGBDBus::ImageMap& images, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRGBDBus::CameraList& __p_cameras, ::Ice::Int __p_decimation, ::RoboCompRGBDBus::ImageMap& __p_images, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cameras(__p_cameras),
            _m_decimation(__p_decimation),
            _m_images(__p_images)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRGBDBus::RGBDBus* servant = dynamic_cast< ::RoboCompRGBDBus::RGBDBus*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getDecimatedImages(_m_cameras, _m_decimation, _m_images, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompRGBDBus::CameraList& _m_cameras;
        ::Ice::Int _m_decimation;
        ::RoboCompRGBDBus::ImageMap& _m_images;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRGBDBus__RGBDBus__getDecimatedImages_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(cameras, decimation, images, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompRGBDBus::upCast(::RoboCompRGBDBus::RGBDBus* p) { return p; }

namespace
{
const ::std::string __RoboCompRGBDBus__RGBDBus_ids[2] =
{
    "::Ice::Object",
    "::RoboCompRGBDBus::RGBDBus"
};

}

bool
RoboCompRGBDBus::RGBDBus::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompRGBDBus__RGBDBus_ids, __RoboCompRGBDBus__RGBDBus_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompRGBDBus::RGBDBus::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompRGBDBus__RGBDBus_ids[0], &__RoboCompRGBDBus__RGBDBus_ids[2]);
}

const ::std::string&
RoboCompRGBDBus::RGBDBus::ice_id(const ::Ice::Current&) const
{
    return __RoboCompRGBDBus__RGBDBus_ids[1];
}

const ::std::string&
RoboCompRGBDBus::RGBDBus::ice_staticId()
{
    return __RoboCompRGBDBus__RGBDBus_ids[1];
}

::Ice::DispatchStatus
RoboCompRGBDBus::RGBDBus::___getAllCameraParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::RoboCompRGBDBus::CameraParamsMap __ret = getAllCameraParams(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBDBus::RGBDBus::___getImages(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRGBDBus::CameraList cameras;
    __is->read(cameras);
    __inS.endReadParams();
    ::RoboCompRGBDBus::ImageMap images;
    try
    {
        getImages(cameras, images, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(images);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBDBus::RGBDBus::___getPointClouds(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRGBDBus::CameraList cameras;
    __is->read(cameras);
    __inS.endReadParams();
    ::RoboCompRGBDBus::PointCloudMap clouds;
    try
    {
        getPointClouds(cameras, clouds, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(clouds);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBDBus::RGBDBus::___getProtoClouds(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRGBDBus::CameraList cameras;
    __is->read(cameras);
    __inS.endReadParams();
    ::RoboCompRGBDBus::PointCloudMap protoClouds;
    try
    {
        getProtoClouds(cameras, protoClouds, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(protoClouds);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBDBus::RGBDBus::___getDecimatedImages(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRGBDBus::CameraList cameras;
    ::Ice::Int decimation;
    __is->read(cameras);
    __is->read(decimation);
    __inS.endReadParams();
    ::RoboCompRGBDBus::ImageMap images;
    try
    {
        getDecimatedImages(cameras, decimation, images, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(images);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBDBus::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __RoboCompRGBDBus__RGBDBus_all[] =
{
    "getAllCameraParams",
    "getDecimatedImages",
    "getImages",
    "getPointClouds",
    "getProtoClouds",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
RoboCompRGBDBus::RGBDBus::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompRGBDBus__RGBDBus_all, __RoboCompRGBDBus__RGBDBus_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompRGBDBus__RGBDBus_all)
    {
        case 0:
        {
            return ___getAllCameraParams(in, current);
        }
        case 1:
        {
            return ___getDecimatedImages(in, current);
        }
        case 2:
        {
            return ___getImages(in, current);
        }
        case 3:
        {
            return ___getPointClouds(in, current);
        }
        case 4:
        {
            return ___getProtoClouds(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompRGBDBus::RGBDBus::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompRGBDBus::RGBDBus::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompRGBDBus::__patch(RGBDBusPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompRGBDBus::RGBDBusPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompRGBDBus::RGBDBus::ice_staticId(), v);
    }
}
