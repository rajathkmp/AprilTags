// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `DifferentialRobot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <DifferentialRobot.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name = "getBaseState";

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name = "getBasePose";

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name = "setSpeedBase";

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__stopBase_name = "stopBase";

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name = "resetOdometer";

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name = "setOdometer";

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name = "setOdometerPose";

const ::std::string __RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name = "correctOdometer";

}

namespace
{

const char* __RoboCompDifferentialRobot__HardwareFailedException_name = "RoboCompDifferentialRobot::HardwareFailedException";

struct __F__RoboCompDifferentialRobot__HardwareFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompDifferentialRobot::HardwareFailedException();
    }
};

class __F__RoboCompDifferentialRobot__HardwareFailedException__Init
{
public:

    __F__RoboCompDifferentialRobot__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompDifferentialRobot::HardwareFailedException", new __F__RoboCompDifferentialRobot__HardwareFailedException);
    }

    ~__F__RoboCompDifferentialRobot__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompDifferentialRobot::HardwareFailedException");
    }
};

const __F__RoboCompDifferentialRobot__HardwareFailedException__Init __F__RoboCompDifferentialRobot__HardwareFailedException__i;

}

RoboCompDifferentialRobot::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompDifferentialRobot::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompDifferentialRobot::HardwareFailedException::ice_name() const
{
    return __RoboCompDifferentialRobot__HardwareFailedException_name;
}

RoboCompDifferentialRobot::HardwareFailedException*
RoboCompDifferentialRobot::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompDifferentialRobot::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompDifferentialRobot::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompDifferentialRobot::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompDifferentialRobot::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompDifferentialRobot::upCast(::IceProxy::RoboCompDifferentialRobot::DifferentialRobot* p) { return p; }

void
::IceProxy::RoboCompDifferentialRobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDifferentialRobot::DifferentialRobot>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompDifferentialRobot::DifferentialRobot;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::getBaseState(::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->getBaseState(state, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_getBaseState(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_getBaseState(::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(state);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::getBasePose(::Ice::Int& x, ::Ice::Int& z, ::Ice::Float& alpha, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->getBasePose(x, z, alpha, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_getBasePose(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_getBasePose(::Ice::Int& x, ::Ice::Int& z, ::Ice::Float& alpha, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(x);
        __is->read(z);
        __is->read(alpha);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::setSpeedBase(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->setSpeedBase(adv, rot, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_setSpeedBase(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(adv);
        __os->write(rot);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_setSpeedBase(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::stopBase(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__stopBase_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__stopBase_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->stopBase(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_stopBase(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__stopBase_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__stopBase_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__stopBase_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_stopBase(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__stopBase_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::resetOdometer(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->resetOdometer(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_resetOdometer(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_resetOdometer(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::setOdometer(const ::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->setOdometer(state, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_setOdometer(const ::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(state);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_setOdometer(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::setOdometerPose(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->setOdometerPose(x, z, alpha, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_setOdometerPose(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(x);
        __os->write(z);
        __os->write(alpha);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_setOdometerPose(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::correctOdometer(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot* __del = dynamic_cast< ::IceDelegate::RoboCompDifferentialRobot::DifferentialRobot*>(__delBase.get());
            __del->correctOdometer(x, z, alpha, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::begin_correctOdometer(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(x);
        __os->write(z);
        __os->write(alpha);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::end_correctOdometer(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::ice_staticId()
{
    return ::RoboCompDifferentialRobot::DifferentialRobot::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompDifferentialRobot::DifferentialRobot::__newInstance() const
{
    return new DifferentialRobot;
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::getBaseState(::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(state);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::getBasePose(::Ice::Int& x, ::Ice::Int& z, ::Ice::Float& alpha, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(x);
        __is->read(z);
        __is->read(alpha);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::setSpeedBase(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(adv);
        __os->write(rot);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::stopBase(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__stopBase_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::resetOdometer(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::setOdometer(const ::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(state);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::setOdometerPose(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(x);
        __os->write(z);
        __os->write(alpha);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompDifferentialRobot::DifferentialRobot::correctOdometer(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(x);
        __os->write(z);
        __os->write(alpha);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::getBaseState(::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompDifferentialRobot::TBaseState& __p_state, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_state(__p_state)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getBaseState(_m_state, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompDifferentialRobot::TBaseState& _m_state;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__getBaseState_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(state, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::getBasePose(::Ice::Int& x, ::Ice::Int& z, ::Ice::Float& alpha, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __p_x, ::Ice::Int& __p_z, ::Ice::Float& __p_alpha, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_x(__p_x),
            _m_z(__p_z),
            _m_alpha(__p_alpha)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getBasePose(_m_x, _m_z, _m_alpha, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _m_x;
        ::Ice::Int& _m_z;
        ::Ice::Float& _m_alpha;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__getBasePose_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(x, z, alpha, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::setSpeedBase(::Ice::Float adv, ::Ice::Float rot, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_adv(__p_adv),
            _m_rot(__p_rot)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setSpeedBase(_m_adv, _m_rot, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Float _m_adv;
        ::Ice::Float _m_rot;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__setSpeedBase_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(adv, rot, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::stopBase(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->stopBase(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__stopBase_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::resetOdometer(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->resetOdometer(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__resetOdometer_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::setOdometer(const ::RoboCompDifferentialRobot::TBaseState& state, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompDifferentialRobot::TBaseState& __p_state, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_state(__p_state)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setOdometer(_m_state, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompDifferentialRobot::TBaseState& _m_state;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__setOdometer_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(state, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::setOdometerPose(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_x(__p_x),
            _m_z(__p_z),
            _m_alpha(__p_alpha)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setOdometerPose(_m_x, _m_z, _m_alpha, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_x;
        ::Ice::Int _m_z;
        ::Ice::Float _m_alpha;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__setOdometerPose_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(x, z, alpha, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompDifferentialRobot::DifferentialRobot::correctOdometer(::Ice::Int x, ::Ice::Int z, ::Ice::Float alpha, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_x(__p_x),
            _m_z(__p_z),
            _m_alpha(__p_alpha)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompDifferentialRobot::DifferentialRobot* servant = dynamic_cast< ::RoboCompDifferentialRobot::DifferentialRobot*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->correctOdometer(_m_x, _m_z, _m_alpha, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_x;
        ::Ice::Int _m_z;
        ::Ice::Float _m_alpha;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompDifferentialRobot__DifferentialRobot__correctOdometer_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(x, z, alpha, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* RoboCompDifferentialRobot::upCast(::RoboCompDifferentialRobot::DifferentialRobot* p) { return p; }

namespace
{
const ::std::string __RoboCompDifferentialRobot__DifferentialRobot_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDifferentialRobot::DifferentialRobot"
};

}

bool
RoboCompDifferentialRobot::DifferentialRobot::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompDifferentialRobot__DifferentialRobot_ids, __RoboCompDifferentialRobot__DifferentialRobot_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompDifferentialRobot::DifferentialRobot::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompDifferentialRobot__DifferentialRobot_ids[0], &__RoboCompDifferentialRobot__DifferentialRobot_ids[2]);
}

const ::std::string&
RoboCompDifferentialRobot::DifferentialRobot::ice_id(const ::Ice::Current&) const
{
    return __RoboCompDifferentialRobot__DifferentialRobot_ids[1];
}

const ::std::string&
RoboCompDifferentialRobot::DifferentialRobot::ice_staticId()
{
    return __RoboCompDifferentialRobot__DifferentialRobot_ids[1];
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___getBaseState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompDifferentialRobot::TBaseState state;
    try
    {
        getBaseState(state, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(state);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___getBasePose(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Int x;
    ::Ice::Int z;
    ::Ice::Float alpha;
    try
    {
        getBasePose(x, z, alpha, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(x);
        __os->write(z);
        __os->write(alpha);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___setSpeedBase(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float adv;
    ::Ice::Float rot;
    __is->read(adv);
    __is->read(rot);
    __inS.endReadParams();
    try
    {
        setSpeedBase(adv, rot, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___stopBase(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        stopBase(__current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___resetOdometer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        resetOdometer(__current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___setOdometer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompDifferentialRobot::TBaseState state;
    __is->read(state);
    __inS.endReadParams();
    try
    {
        setOdometer(state, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___setOdometerPose(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int x;
    ::Ice::Int z;
    ::Ice::Float alpha;
    __is->read(x);
    __is->read(z);
    __is->read(alpha);
    __inS.endReadParams();
    try
    {
        setOdometerPose(x, z, alpha, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::___correctOdometer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int x;
    ::Ice::Int z;
    ::Ice::Float alpha;
    __is->read(x);
    __is->read(z);
    __is->read(alpha);
    __inS.endReadParams();
    try
    {
        correctOdometer(x, z, alpha, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompDifferentialRobot::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __RoboCompDifferentialRobot__DifferentialRobot_all[] =
{
    "correctOdometer",
    "getBasePose",
    "getBaseState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resetOdometer",
    "setOdometer",
    "setOdometerPose",
    "setSpeedBase",
    "stopBase"
};

}

::Ice::DispatchStatus
RoboCompDifferentialRobot::DifferentialRobot::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompDifferentialRobot__DifferentialRobot_all, __RoboCompDifferentialRobot__DifferentialRobot_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompDifferentialRobot__DifferentialRobot_all)
    {
        case 0:
        {
            return ___correctOdometer(in, current);
        }
        case 1:
        {
            return ___getBasePose(in, current);
        }
        case 2:
        {
            return ___getBaseState(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___resetOdometer(in, current);
        }
        case 8:
        {
            return ___setOdometer(in, current);
        }
        case 9:
        {
            return ___setOdometerPose(in, current);
        }
        case 10:
        {
            return ___setSpeedBase(in, current);
        }
        case 11:
        {
            return ___stopBase(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompDifferentialRobot::DifferentialRobot::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompDifferentialRobot::DifferentialRobot::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompDifferentialRobot::__patch(DifferentialRobotPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompDifferentialRobot::DifferentialRobotPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompDifferentialRobot::DifferentialRobot::ice_staticId(), v);
    }
}
